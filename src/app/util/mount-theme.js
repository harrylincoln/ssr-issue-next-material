import { JssProvider, SheetsRegistry, ThemeProvider } from 'react-jss';
import { mount, shallow } from 'enzyme';

import { Provider } from 'react-redux';
import React from 'react';
import configureMockStore from 'redux-mock-store';
// theming
import primary from '../styles/themes/primary';
import { themeCreator } from './create-theme';
import thunk from 'redux-thunk';
import { createGenerateClassName } from '@material-ui/core/styles';

const mockStore = configureMockStore([thunk]);
const primaryTheme = themeCreator({ primary });

/**
 * JSS helper mount
 * Wraps the passed in component in Themeprovider and captures the styles generated
 * @param {React component} Component
 * @returns {Array} First item in array is the stylesheet generated by jss, the second is the rendered component for further expects
 */
export const themeMount = (Component, store = mockStore({})) => {
    const sheets = new SheetsRegistry();
    const ClonedComponent = React.cloneElement(Component, {
        _renderid: 'rendered-component' /* eslint-disable-line */,
    });

    const fullTree = mount(
        <JssProvider
            generateClassName={createGenerateClassName()}
            registry={sheets}
        >
            <ThemeProvider theme={primaryTheme}>
                <Provider store={store}>{ClonedComponent}</Provider>
            </ThemeProvider>
        </JssProvider>
    );

    const mountWithTheme = (tree, theme) => {
        const context = shallow(<ThemeProvider theme={theme} />, {
            lifecycleExperimental: true,
        })
            .instance()
            .getChildContext();

        return mount(tree, {
            context,
            childContextTypes: ThemeProvider.childContextTypes, // Needed so child components receive the theme prop
        });
    };

    const fullMountWithTheme = mountWithTheme(
        <Provider store={store}>
            <JssProvider
                generateClassName={createGenerateClassName()}
                registry={sheets}
            >
                {Component}
            </JssProvider>
        </Provider>,
        primaryTheme
    );

    return {
        styleSheets: sheets.toString(),
        component: fullTree.findWhere(
            (node) =>
                node.props()._renderid === /* eslint-disable-line */
                'rendered-component'
        ),
        fullRendered: fullTree,
        fullMountWithTheme,
        mockStore: store,
    };
};
